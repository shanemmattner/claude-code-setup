"""
Memory Bank Templates

Templates for creating memory-bank structure files.
Used by setup.py to initialize project memory bank.
"""

from datetime import datetime

def get_project_brief_template(project_name: str, project_type: str, target_users: str) -> str:
    """Template for projectbrief.md"""
    return f'''# {project_name} - Project Brief

## Mission Statement
*[Describe the core purpose of this project in 1-2 sentences]*

## Project Overview
- **Type**: {project_type}
- **Target Users**: {target_users}
- **Phase**: Initial Setup

## Success Metrics
*[Define what success looks like for this project]*

## Core Requirements
*[List the essential requirements that define this project]*

## Key Stakeholders
- **Primary Users**: {target_users}
- **Development Team**: *[List team members or roles]*
- **Other Stakeholders**: *[Any other key stakeholders]*

---
*Generated by Claude Code Setup - {datetime.now().strftime("%Y-%m-%d")}*
*Update this file as the project evolves*
'''

def get_product_context_template(project_name: str, project_type: str, target_users: str) -> str:
    """Template for productContext.md"""
    return f'''# {project_name} - Product Context

## Why This Project Exists
*[Explain the problem this project solves]*

## Target Audience
- **Primary**: {target_users}
- **Use Cases**: *[Describe main use cases]*

## Value Proposition
*[What unique value does this project provide?]*

## Market/Domain Context
*[Relevant context about the domain or market]*

## Competitive Landscape
*[How this project fits in the broader ecosystem]*

## User Journey
*[How users will discover, onboard, and use this project]*

---
*Generated by Claude Code Setup - {datetime.now().strftime("%Y-%m-%d")}*
*This context helps AI agents understand the "why" behind decisions*
'''

def get_active_context_template(project_name: str) -> str:
    """Template for activeContext.md"""
    return f'''# {project_name} - Active Context

## Current Focus
*[What are we working on right now?]*

## Recent Decisions
*[Important architectural or design decisions made in recent sessions]*

## Next Steps
*[What needs to happen next?]*

## Blockers/Questions
*[Any current blockers or open questions]*

## Session Notes
*[Update this during development sessions]*

### Session {datetime.now().strftime("%Y-%m-%d")}
- Project initialized with Claude Code Setup
- Memory bank structure created
- Ready for PRD-driven development

---
*Last Updated: {datetime.now().strftime("%Y-%m-%d %H:%M")}*
*This file should be updated frequently during active development*
'''

def get_system_patterns_template(project_name: str, project_type: str, 
                                primary_language: str, test_framework: str,
                                formatter: str, linter: str, type_checker: str) -> str:
    """Template for systemPatterns.md"""
    return f'''# {project_name} - System Patterns

## Architecture Overview
*[High-level architecture description]*

## Design Patterns
*[Key design patterns used in the project]*

## Code Organization
*[How the code is structured and organized]*

### Directory Structure
```
{project_name.lower().replace(' ', '-')}/
‚îú‚îÄ‚îÄ src/                  # Source code
‚îú‚îÄ‚îÄ tests/               # Test files
‚îú‚îÄ‚îÄ docs/               # Documentation
‚îú‚îÄ‚îÄ memory-bank/        # Project memory system
‚îî‚îÄ‚îÄ .claude/            # Claude Code configuration
```

## Testing Approach
- **Framework**: {test_framework}
- **Strategy**: Test-Driven Development (TDD)
- **Coverage Target**: 85%+
- **Test Types**: Unit, Integration, End-to-end

## Quality Standards
- **Language**: {primary_language}
- **Formatter**: {formatter}
- **Linter**: {linter}
- **Type Checker**: {type_checker}

## Development Patterns
- **PRD-First**: All features start with approved PRD
- **Small Chunks**: Work broken into 15-30 minute segments  
- **TDD Cycle**: Red ‚Üí Green ‚Üí Refactor
- **Memory Bank Updates**: Continuous context management

## Communication Patterns
- **Session Start**: Always invoke memory-bank-agent first
- **Decision Recording**: Update activeContext.md with decisions
- **Pattern Documentation**: Record reusable patterns here
- **Cross-Session Continuity**: Use memory-bank for context

---
*Generated by Claude Code Setup - {datetime.now().strftime("%Y-%m-%d")}*
*Document established patterns here for consistency*
'''

def get_tech_context_template(project_name: str, primary_language: str, 
                            project_type: str) -> str:
    """Template for techContext.md"""
    return f'''# {project_name} - Technical Context

## Technology Stack
- **Primary Language**: {primary_language}
- **Project Type**: {project_type}

## Development Environment
*[Describe setup requirements, dependencies, etc.]*

### Prerequisites
- {primary_language} (version X.X+)
- Package manager (pip, npm, cargo, etc.)
- Development tools (IDE, debugger, etc.)

## Build/Deploy Process
*[How to build and deploy this project]*

```bash
# Development setup
# TODO: Add specific setup commands

# Run tests
# TODO: Add test commands

# Build project
# TODO: Add build commands

# Deploy
# TODO: Add deployment commands
```

## Dependencies
*[Key dependencies and why they were chosen]*

## Infrastructure/Platform
*[Where this runs, what it depends on]*

## Constraints
*[Technical constraints, performance requirements, etc.]*

## Development Workflow
1. Get context: `claude memory-context`
2. Create PRD: `claude create-prd [feature]`
3. Plan work: `claude plan-work [goal]`
4. Implement: `claude implement-tdd [feature]`
5. Quality check: `claude quality-check`

---
*Generated by Claude Code Setup - {datetime.now().strftime("%Y-%m-%d")}*
*This helps AI agents understand the technical environment*
'''

def get_progress_template(project_name: str) -> str:
    """Template for progress.md"""
    return f'''# {project_name} - Progress Tracking

## What Works
- ‚úÖ Claude Code Setup completed
- ‚úÖ Memory bank system initialized  
- ‚úÖ PRD-driven workflow configured

## What's Left
- üîÑ Initial project setup/scaffolding
- üîÑ Core feature implementation
- üîÑ Testing and validation
- üîÑ Documentation and examples

## Known Issues
*[Current bugs or limitations]*

## Recent Achievements
### {datetime.now().strftime("%Y-%m-%d")}
- Initialized project with Claude Code universal setup
- Created memory-bank structure for cross-session continuity
- Configured PRD-driven development workflow

## Quality Metrics
- **Test Coverage**: 0% (initial state)
- **Linting Status**: Clean (no code yet)
- **Type Coverage**: N/A (no code yet)

## Performance Metrics
*[If applicable, track performance over time]*

## Deployment Status
- **Development**: Ready for development
- **Staging**: Not yet configured  
- **Production**: Not yet configured

---
*Generated by Claude Code Setup - {datetime.now().strftime("%Y-%m-%d")}*
*Track progress to maintain momentum and identify bottlenecks*
'''

def get_example_prd_template(project_name: str) -> str:
    """Template for an example PRD"""
    return f'''# PRD: Example Feature

**Created**: {datetime.now().strftime("%Y-%m-%d %H:%M")}
**Status**: üìù TEMPLATE - This is an example PRD

## Problem Statement
*[Clearly describe the problem this feature solves]*

Example: Users need to be able to [specific capability] in order to [achieve goal] because [current limitation].

## Goal
*[What success looks like]*

Example: Enable users to [desired outcome] with [success criteria].

## Solution Approach
*[High-level approach to solving the problem]*

Example:
- Implement [component/system]
- Integrate with [existing system]
- Provide [user interface/API]

## Requirements

### Functional Requirements
- Must support [specific functionality]
- Should handle [use case]
- Must integrate with [system]

### Non-Functional Requirements  
- Performance: [specific targets]
- Security: [security requirements]
- Usability: [usability standards]

## Success Metrics
- [Measurable criterion 1]
- [Measurable criterion 2]  
- [Measurable criterion 3]

## Scope

### In Scope
- [What is included]
- [Specific features/functionality]

### Out of Scope
- [What is specifically NOT included]
- [Future considerations]

## Constraints
- [Technical constraints]
- [Timeline constraints]
- [Resource constraints]

## Risks & Mitigation
- **Risk**: [Potential risk]
  - **Mitigation**: [How to address it]

## Implementation Approach
*To be determined during development planning*

## Test Strategy
*To be determined during TDD implementation*

---

## Approval Status
- [ ] **Problem Statement Approved**
- [ ] **Requirements Approved**
- [ ] **Solution Approach Approved**
- [ ] **Ready for Implementation**

**‚ö†Ô∏è NO CODE IMPLEMENTATION WITHOUT APPROVAL ‚ö†Ô∏è**

---
*Example PRD Template - Delete this file after creating your first real PRD*
*Generated by Claude Code Setup - {datetime.now().strftime("%Y-%m-%d")}*
'''

# Export all template functions
__all__ = [
    'get_project_brief_template',
    'get_product_context_template', 
    'get_active_context_template',
    'get_system_patterns_template',
    'get_tech_context_template',
    'get_progress_template',
    'get_example_prd_template'
]